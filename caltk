#!/usr/bin/env ruby

# Ahmet Cetinkaya - 2015

require "tk"

class Time
  def next_month
    if mon == 12
      Time.new(year + 1, 1)
    else
      Time.new(year, mon + 1)
    end
  end

  def previous_month
    if mon == 1
      Time.new(year - 1, 12)
    else
      Time.new(year, mon - 1)
    end
  end
end


class CalWindow < TkRoot
  def init(time)
    @time = time

    resizable(false, false)
    set_style
    
    self["geometry"] = @style[:geometry]
    self["background"] = @style[:bgcolor]
    @font = TkFont.new(size: @style[:fontsize])

    @cal_info_var = TkVariable.new
    var = @cal_info_var
    @cal_info_label = TkLabel.new(self) do
      textvariable var
    end
    @cal_info_label.grid(row: 0, column: 0, columnspan: 7)
    @cal_info_label["foreground"] = @style[:fgcolor]
    @cal_info_label["font"] = @font
    @cal_info_label["background"] = @style[:bgcolor]
    
    @vars = (0..5).to_a.map do |i|
      (0..6).to_a.map do |j|
        var = TkVariable.new
        var
      end
    end
    @labels = (0..5).to_a.map do |i|
      (0..6).to_a.map do |j|
        var = (@vars[i])[j]
        label = TkLabel.new(self) do
          textvariable var
        end
        label.grid(row: i+1, column: j, padx: @style[:padx], pady: @style[:pady])
        label["font"] = @font
        label["background"] = @style[:bgcolor]
        label
      end
    end

    bind("1") do
      Tk.exit
    end

    bind("4") do
      @time = @time.previous_month
      set(@time)
    end

    bind("5") do
      @time = @time.next_month
      set(@time)
    end

    set(time)
  end

  def set_style
    # default values
    
    @style = {
      geometry: "500x500-0+0",
      fontsize: 15,
      bgcolor: "#101010",
      fgcolor: "#C0C0C0",
      todayfgcolor: "white",
      todaybgcolor: "#101010",
      padx: 10,
      pady: 10
    }

    
    rc_filename = File.join(ENV["HOME"], ".caltkrc")
    if FileTest.exists?(rc_filename)
      text = File.read(rc_filename)
      text.split("\n").each do |line|
        parts = line.split(/\W*:\W*/)
        if parts.length >= 2
          if @style[parts[0]]
            @style[parts[0]] = parts[1]
          end
        end
      end
    end
  end

  def set(time)
    cal = Cal.new(time.year, time.month)
    @cal_info_var.value = cal.info
    (0..5).to_a.map do |i|
      (0..6).to_a.map do |j|
        ((@vars[i])[j]).value = "  "
      end
    end
    
    cal.table.map.with_index do |row, i|
      row.each.with_index do |data, j|
        ((@vars[i])[j]).value = data
        label = ((@labels[i])[j])
        now = Time.now
        if now.year == time.year and now.mon == time.mon and data.to_i == now.mday
          label["foreground"] = @style[:todayfgcolor]
          label["background"] = @style[:todaybgcolor]
        else
          label["foreground"] = @style[:fgcolor]
          label["background"] = @style[:bgcolor]
        end
      end
    end
  end
  
end


class Cal
  attr_reader :info, :table
  def initialize(year, month)
    lines = `cal #{month} #{year}`.split("\n")
    @info = lines[0].strip
    @table = lines[1..lines.length-2].map.with_index do |line, index|
      parts = line.strip.split(/\W+/)
      if index == 1
        # fill front
        front = (" " * (7 - parts.length)).split("")
        front + parts
      elsif index == lines.length - 3
        # fill back
        back = (" " * (7 - parts.length)).split("")
        parts + back
      else
        parts
      end
    end
  end
end

if ARGV.length == 0
  CalWindow.new.init(Time.now)
elsif ARGV.length == 1
  mon = ARGV[0].to_i
  now = Time.now
  mon = now.mon unless mon >= 1 and mon <= 12
  year = now.year
  CalWindow.new.init(Time.new(year, mon))
else
  mon = ARGV[0].to_i
  year = ARGV[1].to_i

  if mon > 12 and year <= 12
    year, mon = mon, year
  end

  now = Time.now
  mon = now.mon unless mon >= 1 and mon <= 12
  year = now.year unless year > 0
  
  CalWindow.new.init(Time.new(year, mon))
end

Tk.mainloop
